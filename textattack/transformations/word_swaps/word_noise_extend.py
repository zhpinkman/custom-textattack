"""
Word Noise Addition
-------------------------------
"""

from .word_swap import WordSwap

import string
import random
import numpy as np

# initializing size of string

# using random.choices()
# generating random strings


class WordNoiseExtend(WordSwap):
    def __init__(self, type_of_noise):
        self.letters_to_insert = string.ascii_letters
        self.type_of_noise = type_of_noise

    def _get_transformations(self, current_text, indices_to_modify):
        """Return all possible transformed sentences, each with one extension.

        >>> from textattack.transformations import WordSwapExtend
        >>> from textattack.augmentation import Augmenter

        >>> transformation = WordSwapExtend()
        >>> augmenter = Augmenter(transformation=transformation)
        >>> s = '''I'm fabulous'''
        >>> augmenter.augment(s)
        """
        transformed_texts = []
        words = current_text.words

        science_random_words = [
            "Quantum",
            "Nanotechnology",
            "Robotics",
            "Biotechnology",
            "Artificial intelligence",
            "Cybersecurity",
            "Virtual reality",
            "Augmented reality",
            "Genome",
            "Renewable energy",
            "Internet of Things",
            "Big data",
            "Cloud computing",
            "Genetic engineering",
            "Automation",
            "Space exploration",
            "Blockchain",
            "3D printing",
            "Machine learning",
            "Cryptocurrency",
            "Neuroscience",
            "Wireless",
            "Drones",
            "Solar power",
            "Data mining",
            "Biometrics",
            "Bioinformatics",
            "Computer vision",
            "Quantum computing",
            "Internet security",
            "Cryptography",
        ]

        business_random_words = [
            "Entrepreneur",
            "Startup",
            "Marketing",
            "Finance",
            "E-commerce",
            "Sales",
            "Investment",
            "Strategy",
            "Leadership",
            "Market research",
            "Branding",
            "Advertising",
            "Networking",
            "Negotiation",
            "Customer service",
            "Supply chain",
            "Productivity",
            "Business development",
            "Risk management",
            "Teamwork",
            "Analytics",
            "Profitability",
            "Outsourcing",
            "Mergers",
            "Acquisitions",
            "Cash flow",
            "Entrepreneurship",
            "Business plan",
            "Sustainability",
            "Innovation",
        ]

        sports_random_words = [
            "Football",
            "Basketball",
            "Baseball",
            "Soccer",
            "Tennis",
            "Golf",
            "Cricket",
            "Swimming",
            "Athletics",
            "Volleyball",
            "Hockey",
            "Rugby",
            "Cycling",
            "Boxing",
            "Martial arts",
            "Gymnastics",
            "Wrestling",
            "Skiing",
            "Snowboarding",
            "Surfing",
            "Horse racing",
            "Formula 1",
            "Sailing",
            "Badminton",
            "Table tennis",
            "Running",
            "Weightlifting",
            "Archery",
            "Diving",
            "Triathlon",
        ]

        world_random_words = [
            "Culture",
            "Heritage",
            "Tradition",
            "Language",
            "Cuisine",
            "Art",
            "Music",
            "Literature",
            "History",
            "Architecture",
            "Nature",
            "Adventure",
            "Exploration",
            "Diversity",
            "Globalization",
            "Technology",
            "Innovation",
            "Communication",
            "Education",
            "Healthcare",
            "Environment",
            "Sustainability",
            "Climate change",
            "Human rights",
            "Equality",
            "Justice",
            "Peace",
            "Democracy",
            "Social media",
            "Travel",
        ]

        ag_news_random_words = [
            *science_random_words,
            *business_random_words,
            *sports_random_words,
            *world_random_words,
            "https://www.bbc.com/news/world",
            "https://www.nytimes.com/top-stories",
            "https://www.cnn.com/politics",
            "https://www.theguardian.com/technology",
            "https://www.aljazeera.com/news/health",
            "https://www.reuters.com/business/stocks",
            "https://www.bloomberg.com/markets/currencies",
            "https://www.abcnews.go.com/entertainment/celebrities",
            "https://www.nbcnews.com/science/environment",
            "https://www.cbsnews.com/health/nutrition",
            "https://www.foxnews.com/sports/nfl",
            "https://www.apnews.com/world/europe",
            "https://www.huffpost.com/section/business",
            "https://www.dailymail.co.uk/news/science",
            "https://www.thetimes.co.uk/world/us-news",
            "https://www.usatoday.com/opinion/editorials",
            "https://www.independent.co.uk/arts-entertainment/film",
            "https://www.vice.com/en_us/topic/technology",
            "https://www.rt.com/news/politics",
            "https://www.ewn.co.za/sport/cricket",
        ]

        imdb_random_words = [
            "Joyful",
            "Grateful",
            "Excited",
            "Hopeful",
            "Delighted",
            "Blessed",
            "Energetic",
            "Serene",
            "Optimistic",
            "Thrilled",
            "Radiant",
            "Content",
            "Ecstatic",
            "Enthusiastic",
            "Vibrant",
            "Empowered",
            "Harmonious",
            "Blissful",
            "Inspired",
            "Satisfied",
            "Sad",
            "Angry",
            "Frustrated",
            "Worried",
            "Anxious",
            "Disappointed",
            "Tired",
            "Stressed",
            "Irritated",
            "Unhappy",
            "Gloomy",
            "Pessimistic",
            "Upset",
            "Discouraged",
            "Agitated",
            "Exhausted",
            "Desperate",
            "Enraged",
            "Miserable",
            "Defeated",
            "Actress",
            "Director",
            "Cinematography",
            "Plot",
            "Character",
            "Performance",
            "Script",
            "Genre",
            "Review",
            "Rating",
            "Critic",
            "Audience",
            "Screenplay",
            "Casting",
            "Sequel",
            "Prequel",
            "Remake",
            "Box Office",
            "Oscar",
            "Award",
            "Soundtrack",
            "Suspense",
            "Foreign",
            "Blockbuster",
            "Character Development",
            "Performance",
            "Screen Presence",
            "Cinematic",
            "Entertainment",
            "Masterpiece",
            "https://www.imdb.com/",
            "https://www.imdb.com/title/tt0111161/",
            "https://www.imdb.com/name/nm0000151/",
            "https://www.imdb.com/chart/top/",
            "https://www.imdb.com/search/title/",
            "https://www.imdb.com/list/ls009668711/",
            "https://www.imdb.com/news/",
            "https://www.imdb.com/feature/",
            "https://www.imdb.com/company/co0005073/",
            "https://www.imdb.com/boxoffice/",
            "https://www.imdb.com/help/show_leaf?linkaffects=keywords",
            "https://www.imdb.com/registration/signin",
            "https://www.imdb.com/contact/index",
            "https://www.imdb.com/contributor/",
            "https://www.imdb.com/about/",
            "https://www.imdb.com/conditions",
            "https://www.imdb.com/privacy",
            "https://www.imdb.com/pressroom/",
            "https://www.imdb.com/jobs",
            "https://www.imdb.com/advertising/",
            "@MovieLover",
            "@Cinephile123",
            "@FilmFanatic",
            "@TheatreGeek",
            "@MovieBuff",
            "@IMDbFan",
            "@ReviewMaster",
            "@PopcornJunkie",
            "@FlickFollower",
            "@MovieManiac",
            "@CinemaEnthusiast",
            "@ScreenWatcher",
            "@FilmCritic",
            "@MovieWhiz",
            "@MovieAddict",
            "@SilverScreen",
            "@CinemaFan",
            "@FilmReviewer",
            "@TheaterAficionado",
            "@IMDbProUser",
        ]

        dbpedia_random_words = [
            "Person",
            "Actor",
            "Doctor",
            "Teacher",
            "Detective",
            "Artist",
            "Singer",
            "Writer",
            "Athlete",
            "Chef",
            "Engineer",
            "Scientist",
            "Musician",
            "Politician",
            "Entrepreneur",
            "Designer",
            "Photographer",
            "Journalist",
            "Architect",
            "Lawyer",
            "Job",
            "Career",
            "Occupation",
            "Profession",
            "Task",
            "Project",
            "Assignment",
            "Duty",
            "Responsibility",
            "Employment",
            "Labor",
            "Trade",
            "Vocation",
            "Calling",
            "Task",
            "Chore",
            "Labor",
            "Mission",
            "Enterprise",
            "Venture",
            "Location",
            "City",
            "Country",
            "Town",
            "Village",
            "Region",
            "Landmark",
            "Venue",
            "Spot",
            "Destination",
            "Site",
            "Neighborhood",
            "Street",
            "Park",
            "Beach",
            "Mountain",
            "Island",
            "Forest",
            "Countryside",
            "Hometown",
            "Animal",
            "Mammal",
            "Bird",
            "Reptile",
            "Fish",
            "Amphibian",
            "Insect",
            "Invertebrate",
            "Primate",
            "Marine",
            "Endangered",
            "Exotic",
            "Herbivore",
            "Carnivore",
            "Omnivore",
            "Predator",
            "Prey",
            "Wildlife",
            "Domesticated",
            "Species",
            "Task",
            "Assignment",
            "Project",
            "Job",
            "Workload",
            "Responsibility",
            "Duty",
            "Objective",
            "Goal",
            "Mission",
            "Operation",
            "Chore",
            "Function",
            "Undertaking",
            "Engagement",
            "Effort",
            "Activity",
            "Task",
            "Labor",
            "Enterprise",
            "Occasion",
            "Gathering",
            "Happening",
            "Festival",
            "Celebration",
            "Conference",
            "Concert",
            "Party",
            "Competition",
            "Exhibition",
            "Performance",
            "Ceremony",
            "Rally",
            "Show",
            "Match",
            "Tournament",
            "Wedding",
            "Convention",
            "Parade",
            "Symposium",
            "League",
            "Championship",
            "Tournament",
            "Competition",
            "Season",
            "Fixture",
            "Match",
            "Game",
            "Event",
            "Playoffs",
            "Finals",
            "Cup",
            "Title",
            "Series",
            "Round",
            "Elimination",
            "Group",
            "Standings",
            "Result",
            "Athletics",
            "Gadget",
            "Appliance",
            "Tool",
            "Instrument",
            "Machine",
            "Equipment",
            "Contraption",
            "Apparatus",
            "Device",
            "Technology",
            "Gizmo",
            "Hardware",
            "Implement",
            "Utensil",
            "Widget",
            "Accessory",
            "Invention",
            "Mechanism",
            "Tool",
            "Instrument",
            "Idea",
            "Concept",
            "Topic",
            "Subject",
            "Theme",
            "Notion",
            "Notable",
            "Noteworthy",
            "Relevant",
            "Significant",
            "Interesting",
            "Important",
            "Trend",
            "Controversial",
            "Popular",
            "Trending",
            "Current",
            "Debatable",
            "Discussed",
            "Buzzworthy",
        ]

        if self.type_of_noise == "dbpedia":
            random_part_with_20_words = np.random.choice(
                [0, 1, 2, 3, 4, 5, 6, 7, 8], 1
            )[0]
            selected_random_words = dbpedia_random_words[
                20 * random_part_with_20_words : 20 * (random_part_with_20_words + 1)
            ]
        elif self.type_of_noise == "imdb":
            selected_random_words = imdb_random_words
        elif self.type_of_noise == "ag_news":
            selected_random_words = ag_news_random_words
        else:
            raise ValueError("Unknown type of noise")

        for idx in indices_to_modify:
            word = words[idx]
            # expend when word in map
            # randomly between 1 and 2
            upper_or_lower = np.random.choice([True, False], 1)[0]
            if upper_or_lower:
                expanded = (
                    word
                    + " "
                    + (
                        " ".join(
                            np.random.choice(
                                selected_random_words, np.random.randint(1, 3)
                            )
                        )
                    ).upper()
                )
            else:
                expanded = (
                    word
                    + " "
                    + " ".join(
                        np.random.choice(selected_random_words, np.random.randint(1, 3))
                    )
                )

            transformed_text = current_text.replace_word_at_index(idx, expanded)
            transformed_texts.append(transformed_text)

        return transformed_texts
